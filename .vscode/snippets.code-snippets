{
  // Place your pataphysical workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "New sketch": {
    "scope": "javascript",
    "prefix": "sketch",
    "body": [
      "import { getCanvasSize } from '../utility/canvas'",
      "import { backgroundColor } from '../style/colors'",
      "",

      "const ${1:sketch} = (p5) => {",
      "p5.setup = () => {",
      "const { width, height } = getCanvasSize()",
      "p5.createCanvas(width, height)",
      "p5.background(backgroundColor)",
      "}",
      "",
      "p5.windowResized = () => {",
      "const { width, height } = getCanvasSize()",
      "p5.resizeCanvas(width, height)",
      "}",
      "",
      "p5.draw = () => {$0}",
      "}",
      "",
      "${1:sketch}.date = '${2}'",
      "export { ${1:sketch} }"
    ]
  },
  "New sketch with shader": {
    "scope": "javascript",
    "prefix": "shader-sketch",
    "body": [
      "import { getCanvasSize } from '../../../utility/canvas'",
      "import vert from './shader.vert'",
      "import frag from './shader.frag'",
      "",

      "const ${1:sketch} = (p5) => {",
      "let shader",
      "let width",
      "let height",
      "p5.setup = () => {",
      "p5.pixelDensity(1)",
      "const { width: w, height: h } = getCanvasSize()",
      "width = w",
      "height = h",
      "p5.createCanvas(width, height, p5.WEBGL)",
      "shader = p5.createShader(vert, frag)",
      "}",
      "",
      "p5.windowResized = () => {",
      "const { width: w, height: h } = getCanvasSize()",
      "width = w",
      "height = h",
      "p5.resizeCanvas(width, height)",
      "}",
      "",
      "p5.draw = () => {",
      "p5.translate(-width / 2, -height / 2)",
      "shader.setUniform('resolution', [width, height])",
      "p5.shader(shader)",
      "p5.rect(0, 0, width, height)",
      "${0}",
      "}",
      "}",
      "",
      "${1:sketch}.date = '${2}'",
      "export { ${1:sketch} }"
    ]
  }
}
